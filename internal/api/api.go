package api

import (
	"encoding/json"
	"fmt"
	"github.com/joho/godotenv"
	"github.com/statusquonjc46/fantasy-football-app/internal/database"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
)

func ProcessUserInput(leagueID, year, swid, s2 string) *leagueInfo {
	l := &leagueInfo{}
	l.LeagueID = leagueID
	l.Year = year
	l.SWID = swid
	l.S2 = s2
	l.V2Api = "https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/leagueHistory/{leagueid}?seasonId={year}?view=mTeam"
	l.V3Api = "https://lm-api-reads.fantasy.espn.com/apis/v3/games/ffl/seasons/{year}/segments/0/leagues/{leagueid}?view=mTeam"

	return l
}

func (l *leagueInfo) formatApiCall() (string, error) {
	/*v3_years := []string{
		"2023",
		"2022",
		"2021",
		"2020",
		"2020",
		"2019",
		"2018",
	}

	v2_years := []string{
		"2017",
		"2016",
		"2015",
		"2014",
		"2013",
		"2012",
	}*/

	yearAsInt, err := strconv.Atoi(l.Year)
	println(l.Year)
	if err != nil {
		return "", fmt.Errorf("[Error] - Failed to convert year from string to int: %w\n", err)
	}

	var apiReqStr string
	if yearAsInt < 2018 {
		apiReqStr = strings.Replace(l.V2Api, "{year}", l.Year, 1)
		apiReqStr = strings.Replace(apiReqStr, "{leagueid}", l.LeagueID, 1)
	} else {
		apiReqStr = strings.Replace(l.V3Api, "{year}", l.Year, 1)
		apiReqStr = strings.Replace(apiReqStr, "{leagueid}", l.LeagueID, 1)
	}

	return apiReqStr, nil
}

type leagueInfo struct {
	LeagueID string `json:"league_id"`
	Year     string `json:"year"`
	V2Api    string `json:"v2Api"`
	V3Api    string `json:"v3Api"`
	SWID     string `json:"swid"`
	S2       string `json:"espn_s2"`
}

func MakeCall(l *leagueInfo) {
	err := godotenv.Load()
	if err != nil {
		fmt.Errorf("[Error] - Failed to load .env: %w", err)
		os.Exit(1)
	}

	url, err := l.formatApiCall()
	if err != nil {
		fmt.Println(err)
	}

	client := &http.Client{}

	// Create a new HTTP GET request
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	// Add a cookie to the request
	cookieSWID := &http.Cookie{
		Name: "swid",
		//Value: l.SWID,
		Value: os.Getenv("SWID"),
	}
	req.AddCookie(cookieSWID)

	cookieS2 := &http.Cookie{
		Name: "espn_s2",
		//Value: l.S2,
		Value: os.Getenv("ESPN_S2"),
	}
	req.AddCookie(cookieS2)

	// Send the request
	resp, err := client.Do(req)
	if err != nil {
		err := fmt.Errorf("[Error] - Failed to make request to ESPN api: %w\n", err)
		fmt.Println(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		err := fmt.Errorf("[Error] - Request failed with status code: %d\n", resp.StatusCode)
		fmt.Println(err)
		os.Exit(1)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		err := fmt.Errorf("[Error] - Failed to read response body: %w", err)
		fmt.Println(err)
	}

	var data database.AutoGenerated
	err = json.Unmarshal(body, &data)
	if err != nil {
		err := fmt.Errorf("[Error] - Failed to unmarshal request body: %w", err)
		fmt.Println(err)
	}
	fmt.Println(data.Teams[0].Name)
}
